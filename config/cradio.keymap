#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer defines
#define DEF 0
#define NAV 1 
#define SYM 2
#define FUN 3

// Customizing behaviors
&sk {
    quick-release; // Avoids "THis" problem (double capitalization)
    release-after-ms = <86400000>; // Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { 
    /delete-property/ ignore-modifiers; // This voids pressing command+shift+s instead of a simple command+s - sadly not working at the momentâ€¦
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT LALT RALT SQT CARET TILDE GRAVE SLASH MINUS>; // K_CANCEL is for &lc macro, LSHFT is for PT-BR diacriticals on '^`~" keys, ALT is needed to enter alt characters
    }; 

/ {
    combos {
        compatible = "zmk,combos";
        
        // Shorthand combo synthax copied from https://github.com/kkga/zmk-config/blob/master/config/combos.dtsi
        #define COMBO(NAME,         BINDINGS,                   KEYPOS,     LAYERS,    TERM) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            require-prior-idle-ms = <200>; \
        };

        // Making the keyboard more accessible for one-handed use
        COMBO(left_esc,             &kp ESCAPE,                  1  2  3,   DEF,        60)
        COMBO(left_tab,             &kp TAB,                     1     3,   DEF,        60)
        COMBO(left_enter,           &kp ENTER,                  11 12 13,   DEF,        60)
        COMBO(left_bspc,            &kp BSPC,                   11    13,   DEF,        60)
        COMBO(left_fn,              &kp GLOBE,                  20 21,      DEF,        60)
        COMBO(right_esc,            &kp ESCAPE,                  6  7  8,   DEF,        60)
        COMBO(right_tab,            &kp TAB,                     6     8,   DEF,        60)
        COMBO(right_enter,          &kp ENTER,                  16 17 18,   DEF,        60)
        COMBO(right_bspc,           &kp BSPC,                   16    18,   DEF,        60)
        
        // Layer toggles and other gimmickry
        COMBO(tog_nav,              &tog NAV,                   24 30,      DEF NAV,    60)
        COMBO(tog_sym,              &sl SYM,                    25 33,      DEF SYM,    60)
        COMBO(tog_caps_word,        &caps_word,                 12 17,      DEF,        60)
        COMBO(play_next_previous,   &playnp,                    27 28,      NAV,        60)    

        // SYS combos to connect to BT devices from FUN layer
        COMBO(sys_connect_to_bt0,   &bt BT_SEL 0,                3  4,      FUN,        60)
        COMBO(sys_connect_to_bt1,   &bt BT_SEL 1,               13 14,      FUN,        60)
        COMBO(sys_connect_to_bt2,   &bt BT_SEL 2,               23 24,      FUN,        60)
        
        COMBO(sys_bootloader,       &bootloader,                20 21,      FUN,        60)
        COMBO(sys_clear_br_profile, &bt BT_CLR,                 28 29,      FUN,        60)
    };

    behaviors {
        playnp: play_next_previous_media_key {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mt C_MUTE C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };
        
        vb_up: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            mods = <(MOD_LCTL)>;
        };

        // Swapper for Apple's CMD+TAB behavior

        swapper: swapper_for_apple_cmd_tab {
            compatible = "zmk,behavior-tri-state"; // requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <7 16 17 18 9 19 29>; // Arrows and BSPC, ENTER and DEL for alt-tab movement and window/app controls
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "mo_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
  &kp Q  &kp W  &kp E  &kp R   &kp T        &kp Y   &kp U  &kp I     &kp O   &kp P
  &kp A  &kp S  &kp D  &kp F   &kp G        &kp H   &kp J  &kp K     &kp L   &kp SQT
  &kp Z  &kp X  &kp C  &kp V   &kp B        &kp N   &kp M  &kp COMMA &kp DOT &kp SEMI
                       &lc NAV &kp RSHFT    &kp SPC &lc SYM
            >;
        };

        NAV {
            bindings = <
  &kp TAB   &swapper  &kp LS(LC(TAB)) &kp LC(TAB) &kp LG(RBKT)  &kp PG_UP  &kp HOME    &kp UP   &kp END   &kp BSPC
  &sk LCTRL &sk LALT  &sk LSHFT       &sk LGUI    &kp LG(LBKT)  &kp PG_DN  &kp LEFT    &kp DOWN &kp RIGHT &kp RET
  &kp LG(Z) &kp LG(X) &kp LG(C)       &kp LG(V)   &kp F18       &caps_word &kp LG(SPC) &vb_dn   &vb_up    &kp DEL
                                      &trans      &trans        &trans     &trans
            >;
        };

        SYM {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PRCNT   &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC  &kp DQT
  &kp MINUS  &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR  &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp EQUAL  &kp PLUS   &kp ASTRK  &kp FSLH   &kp AT      &kp PIPE  &kp BSLH  &kp QMARK  &kp EXCL  &kp COLON
                                   &trans     &kp UNDER   &trans    &trans
            >;
        };

        FUN {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5      &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11     &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5      &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &kp C_POWER &kp CAPS  &trans
            >;
        };
    };
};