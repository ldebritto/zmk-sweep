#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
#include "mouse.dtsi"

// Layer defines

#define DEF 0
#define MOU 1
#define NUM 2
#define NAV 3
#define SYM 4
#define FUN 5
#define AOE 6 // AOE 2 layers with easier access for default shortcuts on main layer
#define AGS 7
#define ABS 8

#define HYPER LG(LS(LC(LALT))) // HYPER key

// Customizing behaviors

&sk {
    quick-release; // Avoids "THis" problem (double capitalization)
    release-after-ms = <86400000>; // Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT SQT CARET TILDE GRAVE SLASH MINUS>; }; // K_CANCEL is for &lc macro, LSHFT is for PT-BR diacriticals on ^`~" keys. 

&mt { flavor = "balanced"; };

&num_word { // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
  continue-list = <COLON KP_DOT COMMA PLUS MINUS ASTRK SLASH EQUAL AT DOLLAR BSPC DEL TAB KP_ENTER ESC LPAR RPAR LBKT RBKT LBRC RBRC LT GT>;
  ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        // Making the keyboard more accessible for one-handed use with a mouse

        left_hand_esc { // Left hand is great to allow mouse usage simultaneously
            bindings = <&kp ESCAPE>;
            key-positions = <1 2 3>;
            require-prior-idle-ms = <200>;
        };

        left_hand_enter {
            bindings = <&hrml LA(LS(LGUI)) ENTER>;
            key-positions = <11 12 13>;
            require-prior-idle-ms = <200>;
        };

        left_hand_backspace {
            bindings = <&hrml LA(LGUI) BSPC>;
            key-positions = <11 13>;
            require-prior-idle-ms = <200>;
        };

        // Right hand sibblings for ENTER and BACKSPACE to make them more usable with NUM and from DEF

        right_hand_enter { // Feels more natural to press ENTER with the right hand
            bindings = <&hrmr RA(LS(RGUI)) ENTER>;
            key-positions = <16 17 18>;
            require-prior-idle-ms = <200>;
        };

        right_hand_backspace {
            bindings = <&hrml RA(RGUI) BSPC>;
            key-positions = <16 18>;
            require-prior-idle-ms = <200>;
        };

        // Layer toggles and other gimmickry

        toggle_nav_for_extended_edits {
            key-positions = <30 31>;
            bindings = <&tog NAV>;
            require-prior-idle-ms = <200>;
            layers = <DEF NAV>;
        };
        
        sticky_sym_layer_for_one_handed_activation {
            key-positions = <32 33>;
            bindings = <&sl SYM>; // usually just one symbol is used, so a &sl is better than &tog
            require-prior-idle-ms = <200>;
            layers = <DEF SYM>;
        };
        
        toggle_num_word {
            key-positions = <17 33>;
            bindings = <&num_word NUM>; // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
            layers = <DEF MOU NUM>;
        };
        
        toggle_numpad { // For extended edits
            key-positions = <21 22 23>;
            bindings = <&tog NUM>;
            layers = <DEF NUM>;
        };

        toggle_mouse_emulation_layer {
            key-positions = <6 7 8>;
            bindings = <&tog MOU>;
            layers = <DEF MOU>;
        };

        toggle_caps_word {
            key-positions = <12 17>;
            bindings = <&caps_word>;
            layers = <DEF>;
            require-prior-idle-ms = <200>;
        };

        toggle_aoe_gaming_layer {
            key-positions = <20 21 22>;
            bindings = <&tog AOE>;
            layers = <NAV AGS>;
            require-prior-idle-ms = <200>;
        };

        // SYS combos to replace a dedicated SYS layer
        
        sys_bootloader {
            key-positions = <20 21>;
            bindings = <&bootloader>;
            layers = <FUN>;
            require-prior-idle-ms = <200>;
        };

        sys_connect_to_bt0 {
            key-positions = <3 4>;
            bindings = <&bt BT_SEL 0>;
            layers = <FUN>;
        };

        sys_connect_to_bt1 {
            key-positions = <13 14>;
            bindings = <&bt BT_SEL 1>;
            layers = <FUN>;
        };

        sys_connect_to_bt2 { // Further devices can be added up to 6, but these feel enough to me
            key-positions = <23 24>;
            bindings = <&bt BT_SEL 2>;
            layers = <FUN>;
        };

        sys_clear_current_bluetooth_profile { // Required to completely unpair from a device
            key-positions = <28 29>;
            bindings = <&bt BT_CLR>;
            layers = <FUN>;
        };
        
    };

    behaviors {
        playnp: play_next_previous_media_key {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mt C_MUTE C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };
        
        vb_up: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            mods = <(MOD_LCTL)>;
        };

        // Swapper for Apple's CMD+TAB behavior

        swapper: swapper_for_apple_cmd_tab {
            compatible = "zmk,behavior-tri-state"; // requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <7 16 17 18 9 19 29>; // Arrows and BSPC, ENTER and DEL for alt-tab movement and window/app controls
        };

        // Customized hold-tap definitions
        
        hrml: hrml { // urob's home row mods left
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

        hrmr: hrmr { // urob's home row mods right
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>; // left-side + thumbs
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

        // Customized balanced layer-tap

        ltl: layer_tap_left { // urob's logic but for a layer-tap on left hand
            compatible = "zmk,behavior-hold-tap";
            label = "LTL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "mo_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
  
        mnav: from_mou_to_nav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &tog MOU>,
                <&macro_press &lc NAV>,
                <&macro_pause_for_release>,
                <&macro_release &lc NAV>;
        };
        
        mouseless: from_mou_to_def_with_mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &tog MOU>
                , <&macro_tap &kp F19>
                ;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
  &ltl MOU Q     &kp W         &kp E          &kp R         &kp T           &kp Y           &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &hrml HYPER G   &hrmr HYPER H   &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &ltl NUM V    &kp B           &kp N           &kp M         &kp COMMA      &kp DOT       &kp SEMI
                                              &lc NAV       &kp RSHFT       &kp SPACE       &lc SYM
            >;
        };

        MOU {
            bindings = <
&kp TAB           &kp LC(UP) &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(RBKT) &msc SCRL_DOWN  &msc SCRL_RIGHT &mmv MOVE_UP    &msc SCRL_LEFT  &kp BSPC
&kp LCTRL         &kp LALT   &kp LSHFT        &kp LGUI     &kp LG(LBKT) &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &kp ENTER
&hrml GLOBE LG(Z) &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp F18      &kp LC(UP)      &num_word NUM   &mkp MCLK       &mkp MB4        &kp DEL
                                              &mnav        &tog MOU     &mkp LCLK       &mkp RCLK            
            >;          
        };

        NUM { // keypad is almost mirrored to allow for use with and without a mouse
            bindings = <
  &trans &trans &trans &trans  &trans        &kp PLUS            &kp N7  &kp N8  &kp N9  &kp ASTRK
  &trans &trans &trans &trans  &trans        &kp MINUS           &kp N4  &kp N5  &kp N6  &kp SLASH
  &trans &trans &trans &trans  &trans        &kp COMMA           &kp N1  &kp N2  &kp N3  &kp KP_DOT
                       &lc NAV &kp K_CANCEL  &mt K_CANCEL SPACE  &lt SYM N0
            >;
        };

        NAV {
            bindings = <
  &kp TAB           &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(RBKT)  &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp BSPC
  &sk LCTRL         &sk LALT   &sk LSHFT        &sk LGUI     &kp LG(LBKT)  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET
  &hrml GLOBE LG(Z) &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp F18       &playnp    &kp F19   &vb_dn    &vb_up     &kp DEL
                                                &trans       &trans        &trans     &trans   
            >;
        };

        SYM {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PRCNT         &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC  &kp DQT
  &kp MINUS  &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR        &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp PLUS   &kp UNDER  &kp ASTRK  &kp FSLH   &kp AT            &kp PIPE  &kp BSLH  &kp QMARK  &kp EXCL  &kp COLON
                                   &trans     &mt RSHFT UNDER   &kp EQUAL &trans
            >;
        };

        FUN {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5              &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11             &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5              &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &kp LG(LA(C_POWER)) &kp CAPS  &trans
            >;
        };



        AOE {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R        &kp T        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G        &trans  &trans  &trans  &trans  &trans
  &kp Z        &kp X       &kp C        &kp V        &lt ABS B    &trans  &trans  &trans  &trans  &trans
                                        &lt AGS H    &lt ABS DOT  &trans  &trans
            >;
        };

        AGS {
            bindings = <
  &kp N1        &kp N2       &kp N3        &kp N4        &kp DEL    &trans  &trans  &trans  &trans  &kp BSPC
  &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp HOME   &trans  &trans  &trans  &trans  &kp ENTER
  &kp COMMA     &kp DOT      &kp BSPC      &kp HOME      &mo ABS     &trans  &trans  &trans  &trans  &kp F3
                                           &trans        &kp SPACE  &trans  &trans
            >;
        };

        ABS {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                               &kp LC(LS(H))  &trans           &trans  &trans
            >;
        };

    };
};