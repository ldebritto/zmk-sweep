#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
#include <layouts/cuddlykeyboards/ferris.dtsi>

// Assigning suitable kscan and matrix transforms
&cuddlykeyboards_ferris_layout {
    transform = <&default_transform>;
    kscan = <&kscan0>;
};

#define DEF 0
#define TMK 1 // TARMAK (https://forum.colemak.com/topic/1858-learn-colemak-in-steps-with-the-tarmak-layouts/)
#define NMT 2 // No-mod-taps for if I regret setting mod-taps and can't access my code or can't update my firmware on the keyboard
#define NUM 3
#define NAV 4
#define SYM 5
#define FUN 6
#define AOE 7 // AOE 2 layers with easier access for default shortcuts on main layer
#define AGS 8
#define ABS 9

&sk {
    quick-release; // Avoids "THis" problem (double capitalization)
    release-after-ms = <86400000>;// Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT SQT CARET TILDE GRAVE>; }; // K_CANCEL is for &lc macro, LSHFT is for PT-BR diacriticals on ^`~" keys. 
&mt { flavor = "balanced"; }; // Using these for GLOBE keys and faster window management with Swish app as well as AOE layers
&num_word {
  continue-list = <
    COLON KP_DOT COMMA 
    SLASH MINUS PLUS ASTRK EQUAL
    BSPC DEL
    TAB KP_ENTER
  >;
  ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_hand_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2 3>; //
            require-prior-idle-ms = <200>;
        };

        left_hand_enter {
            bindings = <&kp ENTER>;
            key-positions = <11 12 13>;
            require-prior-idle-ms = <200>;
        };

        left_hand_backspace {
            bindings = <&kp BSPC>;
            key-positions = <11 13>; // SF
            require-prior-idle-ms = <200>;
        };

        toggle_nav_for_extended_edits {
            key-positions = <30 31>;
            bindings = <&tog NAV>;
            require-prior-idle-ms = <200>;
            layers = <DEF TMK NMT NAV>;
        };
        
        sticky_sym_layer_for_one_handed_activation {
            key-positions = <32 33>;
            bindings = <&sk SYM>; // usually just one symbol is used, so a &sk is better than &tog
            require-prior-idle-ms = <200>;
            layers = <DEF TMK NMT NAV>;
        };

        toggle_num_word {
            key-positions = <12 30>;
            bindings = <&num_word NUM>; // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
            layers = <DEF TMK NMT NUM>;
        };

        toggle_caps_word {
            key-positions = <12 17>;
            bindings = <&caps_word>;
            layers = <DEF TMK NMT>;
            require-prior-idle-ms = <200>;
        };

        toggle_no_mod_taps {
            key-positions = <14 15>;
            bindings = <&tog NMT>;
            layers = <FUN>;
            require-prior-idle-ms = <200>;
        };
        
        toggle_aptmak {
            key-positions = <4 5>;
            bindings = <&tog TMK>;
            layers = <FUN>;
            require-prior-idle-ms = <200>;
        };

        toggle_aoe {
            key-positions = <20 21 22>;
            bindings = <&tog AOE>;
            layers = <DEF AOE>;
            require-prior-idle-ms = <200>;
        };

        sys_bootloader {
            key-positions = <20 21>;
            bindings = <&bootloader>;
            layers = <FUN>;
            require-prior-idle-ms = <200>;
        };

        sys_connect_to_bt0 {
            key-positions = <3 4>;
            bindings = <&bt BT_SEL 0>;
            layers = <FUN>;
        };

        sys_connect_to_bt1 {
            key-positions = <13 14>;
            bindings = <&bt BT_SEL 1>;
            layers = <FUN>;
        };

        sys_connect_to_bt2 {
            key-positions = <23 24>;
            bindings = <&bt BT_SEL 2>;
            layers = <FUN>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            bindings = <&bt BT_CLR>;
            layers = <FUN>;
        };
        
        sys_zmk_studio_unlock {
            key-positions = <16 17 18>;
            bindings = <&studio_unlock>;
            layers = <FUN>;
        };

    };

    behaviors {
        playnp: play_next_previous_media_key {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mt C_MUTE C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };
        
        vb_up: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            mods = <(MOD_LCTL)>;
        };
        
        hp: hold_preferred_mod_tap { // Allows for space/shift+space for scrolling up with the left hand on the keyboard and the right one on the mouse
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_SHIFT";
            bindings = <&kp>, <&kp>;
            
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            hold-while-undecided;
        };

        swapper: swapper_for_apple_cmd_tab {
            compatible = "zmk,behavior-tri-state"; // requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <7 16 17 18 9 19 29>;// Arrows and BSPC, ENTER and DEL
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>; // left-side + thumbs
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };

        ltl: ltl {  // Layer-tap variants for urob's balanced hrm with a &lc instead of a regular &mo on hold
            compatible = "zmk,behavior-hold-tap";
            label = "LC_TAP_L";
            bindings = <&lc>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };

        ltr: ltr { // Layer-tap variants for urob's balanced hrm with a &lc instead of a regular &mo on hold
            compatible = "zmk,behavior-hold-tap";
            label = "LC_TAP_R";
            bindings = <&lc>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>; // left-side + thumbs
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "mo_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
  &kp Q          &kp W         &kp E          &kp R         &kp T           &kp Y           &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &hrml GLOBE G   &hrmr GLOBE H   &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &kp V         &kp B           &kp N           &kp M         &kp COMMA      &kp DOT       &kp SEMI
                                              &lc NAV       &hp RSHFT SPACE &kp SPACE   &lc SYM
            >;
        };

        TMK {
            bindings = <
  &kp Q          &kp W         &kp J          &kp R         &kp T           &kp Y           &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &hrml GLOBE G   &hrmr GLOBE H   &hrmr RGUI N  &hrmr LSHFT E  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &kp V         &kp B           &kp K           &kp M         &kp COMMA      &kp DOT       &kp SEMI
                                              &lc NAV       &hp RSHFT SPACE &kp SPACE   &lc SYM
            >;
        };

        NMT {
            bindings = <
  &kp Q          &kp W  &kp E  &kp R    &kp T     &kp Y      &kp U  &kp I      &kp O    &kp P
  &kp A          &kp S  &kp D  &kp F    &kp G     &kp H      &kp J  &kp K      &kp L    &kp SQT
  &hrml GLOBE Z  &kp X  &kp C  &kp V    &kp B     &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI
                               &lc NAV  &kp RSHFT &kp SPACE  &lc SYM
            >;
        };

        NUM {
            bindings = <
  &kp COLON &kp N7  &kp N8  &kp N9  &kp BSPC            &trans  &trans  &trans  &trans  &trans
  &kp N0    &kp N4  &kp N5  &kp N6  &kp KP_ENTER        &trans  &trans  &trans  &trans  &trans
  &kp COMMA &kp N1  &kp N2  &kp N3  &kp KP_DOT          &trans  &trans  &trans  &trans  &trans
                            &mo NAV &mo SYM             &trans  &trans
            >;
        };

        NAV {
            bindings = <
  &kp TAB           &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(RBKT)  &kp PG_UP   &kp HOME  &kp UP    &kp END    &kp BSPC
  &sk LCTRL         &sk LALT   &sk LSHFT        &sk LGUI     &kp LG(LBKT)  &kp PG_DN   &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET
  &hrml GLOBE LG(Z) &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp F18       &caps_word  &playnp   &vb_dn    &vb_up     &kp DEL
                                                &trans       &trans        &trans      &trans
            >;
        };

        SYM {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PIPE           &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC  &kp DQT
  &kp MINUS  &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR         &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp PLUS   &kp EQUAL  &kp ASTRK  &kp FSLH   &kp PRCNT          &kp AT    &kp BSLH  &kp QMARK  &kp EXCL  &kp COLON
                                   &trans     &mt RSHFT UNDER    &trans    &trans
            >;
        };

        FUN {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5           &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11          &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5           &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &kp LG(LC(Q))    &kp CAPS  &trans
            >;
        };

        AOE {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R        &kp T        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G        &trans  &trans  &trans  &trans  &trans
  &lt 2 Z      &kp X       &kp C        &kp V        &kp B        &trans  &trans  &trans  &trans  &trans
                                        &lt AGS H    &lt ABS DOT  &trans  &trans
            >;
        };

        AGS {
            bindings = <
  &kp N1        &kp N2       &kp N3        &kp N4        &kp N5     &trans  &trans  &trans  &trans  &kp BSPC
  &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp N0     &trans  &trans  &trans  &trans  &kp ENTER
  &kp COMMA     &kp BSPC     &kp SPACE     &kp DOT       &kp H      &trans  &trans  &trans  &trans  &kp F3
                                           &trans        &kp DEL    &trans  &trans
            >;
        };

        ABS {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                               &trans         &trans           &trans  &trans
            >;
        };
    };
};
