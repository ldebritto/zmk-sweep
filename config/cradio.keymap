#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer and key defines to improve readability
#define DEF     0
#define NUM     1
#define NAV     2 // must be bellow MOU for input_processor to work
#define SYM     3
#define FUN     4
#define MOU     5 // also great for one-handed use with a mouse on the right hand

// AOE layers
#define AOE 6 // AOE 2 layers with easier access for default shortcuts on main layer
#define AGS 7
#define ABS 8

#define HYPR LG(LS(LC(LALT))) // HYPR key shorthand

// These includes allow for easier maintenance and readability between different keymaps
#include "features/sweep_keypos.h"                  // Key positions naming scheme for 34 keys keymaps
#include "features/core_behaviors_overrides.dtsi"   // Overriding defaults from core behaviors
#include "features/mouse.dtsi"             // Requires layer defines above since it uses NAV as input processor
#include "features/num_word.dtsi"          // Requires auto-layer module from urob

/ {
    combos { 
        #include "features/combos.dtsi"
    };
    
    behaviors { 
        #include "features/custom_behaviors.dtsi" 
    };

    macros { 
        #include "features/layer_cancel_macros.dtsi"
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
  &ltl MOU Q     &kp W         &kp E          &kp R         &kp T        &kp Y          &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &hrml HYPR G &hrmr HYPR H   &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &ltl NUM V    &kp B        &kp N          &kp M         &kp COMMA      &kp DOT       &kp SEMI
                                              &lc NAV       &kp RSHFT    &kp SPACE      &lc SYM  
            >;
        };

        NUM {
            bindings = <
  &ltl MOU TAB      &mt RBRC LBRC &mt RBKT LBKT &mt RPAR LPAR &kp PRCNT   &mt EQUAL LA(N6) &kp N7      &kp N8  &kp N9  &mt LA(N9) LA(N0)
  &sk LCTRL         &sk LALT      &sk LSHFT     &sk LGUI      &kp DOLLAR  &mt PLUS MINUS   &kp N4      &kp N5  &kp N6  &mt ASTRK SLASH
  &mt GLOBE PLUS    &kp EQUAL     &kp ASTRK     &kp SLASH     &kp AT      &mt TAB COMMA    &kp N1      &kp N2  &kp N3  &mt COLON DOT
                                                NAV_DEF       &sk LGUI    &lt NAV SPACE    &lt SYM N0
            >;
        };

        NAV {
            bindings = <
  &ltl MOU TAB    &swapper    &kp LC(LS(TAB)) &kp LC(TAB)   &kp LG(RBKT)   &kp PG_UP &kp HOME &kp UP   &kp END   &kp BSPC
  &sk LCTRL       &sk LALT    &sk LSHFT       &sk LGUI      &kp LG(LBKT)   &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET
  &mt GLOBE LG(Z) &kp LG(X)   &kp LG(C)       &kp LG(V)     &kp F18        &playnp   &kp F19  &vb_dn   &vb_up    &kp DEL
                                              &trans        &lt SYM SPACE  &trans    &trans
            >;
        };

        SYM {
            bindings = <
  &ltl MOU ESC      &kp LBRC   &kp LBKT   &kp LPAR  &kp PRCNT         &kp AMPS       &kp RPAR  &kp RBKT   &kp RBRC  &kp DQT
  &kp MINUS         &kp CARET  &kp GRAVE  &kp TILDE &kp DOLLAR        &kp HASH       &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &mt GLOBE PLUS    &kp EQUAL  &kp ASTRK  &kp FSLH  &kp AT            &kp PIPE       &kp BSLH  &kp QMARK  &kp EXCL  &kp COLON
                                          &trans    &mt RSHFT UNDER   &lt NAV SPACE &trans
            >;
        };

        FUN {
            bindings = <
  &ltl MOU N1 &kp N2    &kp N3     &kp N4    &kp N5     &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL   &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1      &kp F2    &kp F3     &kp F4    &kp F5     &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
                                   &trans    &kp C_POWER &kp CAPS  &trans
            >;
        };

        MOU {
            bindings = <
  &kp TAB         &mt F11 LC(UP) &kp LC(LS(TAB)) &kp LC(TAB)   &kp LG(RBKT)  &msc SCRL_DOWN &msc SCRL_RIGHT &mmv MOVE_UP    &msc SCRL_LEFT  &kp BSPC
  &sk LCTRL       &sk LALT       &sk LSHFT       &sk LGUI      &kp LG(LBKT)  &msc SCRL_UP   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &kp ENTER
  &mt GLOBE LG(Z) &kp LG(X)      &kp LG(C)       &kp LG(V)     &kp F18       &playnp        &mkp MCLK       &mkp MB4        &mkp MB5        &kp DEL
                                                 NAV_DEF       &kp SPACE     &mkp LCLK      &mkp RCLK            
            >;          
        };

        AOE {
            bindings = <
  &kp Q        &kp W      &kp E       &kp R        &kp T        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S &mt LSHFT D &mt LCTRL F  &kp G        &trans  &trans  &trans  &trans  &trans
  &kp Z        &kp X      &kp C       &kp V        &kp B        &trans  &trans  &trans  &trans  &trans  &none
                                &none       &lt AGS H    &lt ABS DOT  &trans  &trans  &none
            >;
        };

        AGS {
            bindings = <
  &kp N1        &kp N2       &kp N3       &kp N4        &kp DEL    &trans     &trans  &trans  &trans  &kp BSPC
  &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8 &mt LCTRL N9  &kp HOME   &trans     &trans  &trans  &trans  &kp ENTER
  &kp COMMA     &kp DOT      &kp BSPC     &kp HOME      &mo ABS    &kp C_MUTE &trans  &vb_dn  &vb_up  &kp F3   &none
                                   &none        &trans        &kp DEL    &trans     &trans  &none
            >;
        };

        ABS {
            bindings = <
  &kp LC(LS(M))   &kp LC(LS(S))   &kp LC(LS(U))   &kp LC(LS(Y))   &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))   &kp LC(LS(L))   &kp LC(LS(B))   &kp LC(LS(K))   &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))   &kp LC(LS(I))   &kp LC(LS(G))   &kp LC(LS(V))   &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans &none
                                        &none           &trans          &trans           &trans  &trans  &none
            >;
        };
    };
};